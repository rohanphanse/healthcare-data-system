{"version":3,"sources":["utils/contract.js","utils/config.js","utils/near.js","components/AccountInfo.js","utils/cryptography.js","App.js","components/DataEntry.js","index.js"],"names":["generateId","Date","now","toString","substring","Math","random","addAccountInfo","public_key","window","contract","add_account_info","getAccountPublicKey","account_id","get_account_public_key","addContributor","new_contributor","add_contributor","getAccountContributors","get_account_contributors","uploadData","encrypted_symmetric_key","encrypted_data","title","data_id","upload_data","getAccountDataIds","get_account_data_ids","getEncryptedSymmetricKey","get_encrypted_symmetric_key","getEncryptedData","get_encrypted_data","getDataUploader","get_data_uploader","getDataTitle","get_data_title","CONTRACT_NAME","process","nearEnv","env","networkId","nodeUrl","contractName","walletUrl","helperUrl","explorerUrl","Error","environment","connect","Object","assign","deps","keyStore","keyStores","BrowserLocalStorageKeyStore","near","walletConnection","WalletConnection","accountId","getAccountId","Contract","account","viewMethods","changeMethods","accountBalance","formatNearAmount","getAccountBalance","total","login","requestSignIn","logout","signOut","location","reload","AccountInfo","useState","balance","updateBalance","fetchBalance","useCallback","localStorage","getItem","removeItem","setItem","useEffect","className","onClick","jsx","createKeyPair","crypto","subtle","generateKey","name","modulusLength","publicExponent","Uint8Array","hash","keyPair","exportKey","publicKey","privateKey","createSymmetricKey","length","key","exportSymmetricKey","exported","exportedKeyBuffer","bufferToHex","importSymmetricKey","keyString","rawKey","hexToBuffer","importKey","buffer","hex","n","push","Number","padStart","join","hexString","from","match","map","byte","parseInt","symmetricKeyEncrypt","iv","data","encoder","TextEncoder","encoded","encode","encrypt","cipherText","TextDecoder","decode","publicKeyEncrypt","console","log","privateKeyDecrypt","cipherString","decrypt","dec","symmetricKeyDecrypt","importPublicKey","keyJSON","importPrivateKey","App","updateKeyPair","showPrivateKeyField","updatePrivateKeyFieldVis","privateKeyField","updatePrivateKeyField","privateKeyRead","createRef","privateKeyInput","uploadOrGetPublicKey","cryptography","publicKeyJSON","JSON","stringify","privateKeyJSON","parse","fetchKeyPair","privateKeyString","dataEntries","updateDataEntries","fetchDataEntries","entries","ids","id","contributors","updateContributors","fetchContributors","accountInput","titleInput","dataInput","uploadButton","showAccountInput","updateAccountInputVisibility","uploadEncryptedData","toAccount","current","value","receiverPublicKey","getRandomValues","symmetricKey","encryptedData","encryptedSymmetricKey","contributorInput","newContributor","type","ref","select","navigator","clipboard","writeText","error","setPrivateKey","to","checked","c","DataEntry","useParams","dataEntry","updateDataEntry","fetchDataEntry","entry","includes","errorMessage","uploader","decryptedSym","symKey","decIV","decryptedData","nearInitPromise","initializeContract","then","ReactDOM","render","StrictMode","path","element","document","getElementById","catch"],"mappings":"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","file":"static/js/main.9edc1521.chunk.js","sourcesContent":["// Generate 6 character long id\nfunction generateId() {\n    return Date.now().toString(36).substring(6, 8) + Math.random().toString(36).substring(2, 6);\n}\n\nexport async function addAccountInfo(public_key) {\n    return await window.contract.add_account_info({ public_key });\n}\n\nexport async function getAccountPublicKey(account_id) {\n    return await window.contract.get_account_public_key({ account_id });\n}\n\nexport async function addContributor(new_contributor) {\n    return await window.contract.add_contributor({ new_contributor });\n}\n\nexport async function getAccountContributors(account_id) {\n    return await window.contract.get_account_contributors({ account_id });\n}\n\nexport async function removeContributor(removed_contributor) {\n    return await window.contract.remove_contributor({ removed_contributor });\n}\n\nexport async function uploadData(account_id, encrypted_symmetric_key, encrypted_data, title) {\n    let data_id = generateId()\n    return await window.contract.upload_data({ account_id, data_id, encrypted_symmetric_key, encrypted_data, title });\n}\n\nexport async function getAccountDataIds(account_id) {\n    return await window.contract.get_account_data_ids({ account_id });\n} \n\nexport async function getEncryptedSymmetricKey(data_id) {\n    return await window.contract.get_encrypted_symmetric_key({ data_id });\n} \n\nexport async function getEncryptedData(data_id) {\n    return await window.contract.get_encrypted_data({ data_id });\n} \n\nexport async function getDataUploader(data_id) {\n    return await window.contract.get_data_uploader({ data_id });\n} \n\nexport async function getDataTitle(data_id) {\n    return await window.contract.get_data_title({ data_id });\n}\n","const CONTRACT_NAME = process.env.CONTRACT_NAME || \"healthcare.rohanphanse.testnet\"; \n\nexport default function environment(env) {\n    switch (env) {\n        case \"mainnet\":\n            return {\n                networkId: \"mainnet\",\n                nodeUrl: \"https://rpc.mainnet.near.org\",\n                contractName: CONTRACT_NAME,\n                walletUrl: \"https://wallet.near.org\",\n                helperUrl: \"https://helper.mainnet.near.org\",\n                explorerUrl: \"https://explorer.mainnet.near.org\",\n            };\n        case \"testnet\": \n            return {\n                networkId: \"testnet\",\n                nodeUrl: \"https://rpc.testnet.near.org\",\n                contractName: CONTRACT_NAME,\n                walletUrl: \"https://wallet.testnet.near.org\",\n                helperUrl: \"https://helper.testnet.near.org\",\n                explorerUrl: \"https://explorer.testnet.near.org\",\n            };\n        default:\n            throw Error(`Unknown environment '${env}'.`);\n    }\n}","import environment from \"./config\";\nimport { connect, Contract, keyStores, WalletConnection } from \"near-api-js\";\nimport { formatNearAmount } from \"near-api-js/lib/utils/format\";\n\nconst nearEnv = environment(\"testnet\");\n\nexport async function initializeContract() {\n    const near = await connect(\n        Object.assign(\n            { deps: { keyStore: new keyStores.BrowserLocalStorageKeyStore() } },\n            nearEnv\n        )\n    );\n    window.walletConnection = new WalletConnection(near);\n    window.accountId = window.walletConnection.getAccountId();\n    window.contract = new Contract(\n        window.walletConnection.account(),\n        nearEnv.contractName,\n        {\n            viewMethods: [\"get_account_public_key\", \"get_account_contributors\", \"get_account_data_ids\", \"get_encrypted_symmetric_key\", \"get_encrypted_data\", \"get_data_uploader\", \"get_data_title\"],\n            changeMethods: [\"add_account_info\", \"add_contributor\", \"remove_contributor\", \"upload_data\"],\n        }\n    );\n}\n\nexport async function accountBalance() {\n    return formatNearAmount(\n        (await window.walletConnection.account().getAccountBalance()).total,\n        2\n    );\n}\n\nexport async function getAccountId() {\n    return window.walletConnection.getAccountId();\n}\n\nexport function login() {\n    window.walletConnection.requestSignIn(nearEnv.contractName);\n}\n\nexport function logout() {\n    window.walletConnection.signOut();\n    window.location.reload();\n}","import React, { useState, useEffect, useCallback } from \"react\";\nimport { accountBalance, login, logout } from \"../utils/near\";\n\nexport default function AccountInfo({ account }) {\n    // Balance\n    const [balance, updateBalance] = useState(\"0\");\n    const fetchBalance = useCallback(async () => {\n        if (account.accountId) {\n            updateBalance(await accountBalance());\n            if (localStorage.getItem(\"account\") !== account.accountId) {\n                localStorage.removeItem(\"privateKey\")\n                localStorage.setItem(\"account\", account.accountId)\n            }\n        }\n    }, [account.accountId]);\n    useEffect(() => {\n        fetchBalance();\n    }, [fetchBalance])\n    return (\n        <>\n            <h2 className = \"title\">Unified Healthcare Data System</h2>\n            {account.accountId ? (\n                <div className = \"account-info\">\n                    <div><b>Account:</b> {account.accountId}</div>\n                    <div><b>Balance:</b> {balance} NEAR</div>\n                    <button onClick={logout}>LOG OUT</button> \n                </div>\n            ) : (\n                <>\n                    <button onClick={login}>CONNECT WALLET</button>\n                </>\n            )}\n            <style jsx = \"true\">{`\n                .account-info {\n                    margin-bottom: 20px;\n                }\n\n                .title {\n                    margin: 0;\n                }\n            `}</style>\n        </>\n    )\n}","// Create asymmetric (public & private) key pair\n// https://developer.mozilla.org/en-US/docs/Web/API/SubtleCrypto/generateKey\nexport async function createKeyPair() {\n    const keyPair = await crypto.subtle.generateKey(\n        {\n          name: \"RSA-OAEP\",\n          modulusLength: 4096,\n          publicExponent: new Uint8Array([1, 0, 1]),\n          hash: \"SHA-256\"\n        },\n        true,\n        [\"encrypt\", \"decrypt\"]\n    )\n    const publicKey = await crypto.subtle.exportKey(\"jwk\", keyPair.publicKey)\n    const privateKey = await crypto.subtle.exportKey(\"jwk\", keyPair.privateKey)\n    return { publicKey, privateKey }\n}\n\n// Credit: https://developer.mozilla.org/en-US/docs/Web/API/SubtleCrypto/generateKey\nexport async function createSymmetricKey() {\n    let key = await window.crypto.subtle.generateKey(\n        {\n          name: \"AES-GCM\",\n          length: 256\n        },\n        true,\n        [\"encrypt\", \"decrypt\"]\n    )\n    return key\n}\n\n// Credit: https://developer.mozilla.org/en-US/docs/Web/API/SubtleCrypto/exportKey\nexport async function exportSymmetricKey(key) {\n    const exported = await window.crypto.subtle.exportKey(\n        \"raw\",\n        key\n    )\n    const exportedKeyBuffer = new Uint8Array(exported)\n    return bufferToHex(exportedKeyBuffer)\n}\n\nexport async function importSymmetricKey(keyString) {\n    const rawKey = hexToBuffer(keyString)\n    return await window.crypto.subtle.importKey(\n        \"raw\",\n        rawKey,\n        \"AES-GCM\",\n        true,\n        [\"encrypt\", \"decrypt\"]\n    )\n}\n\nexport function bufferToHex(buffer) {\n    let hex = []\n    for (const n of buffer) {\n        hex.push(Number(n).toString(16).padStart(2, \"0\"))\n    }\n    return hex.join(\"\")\n}\n\n// Credit: https://stackoverflow.com/questions/38987784/how-to-convert-a-hexadecimal-string-to-uint8array-and-back-in-javascript\nexport function hexToBuffer(hexString) {\n    return Uint8Array.from(hexString.match(/.{1,2}/g).map((byte) => parseInt(byte, 16)))\n}\n\n// Credit: https://developer.mozilla.org/en-US/docs/Web/API/SubtleCrypto/encrypt\nexport async function symmetricKeyEncrypt(key, iv, data) {\n    let encoder = new TextEncoder()\n    let encoded = encoder.encode(data)\n    let cipherText = await window.crypto.subtle.encrypt(\n        { name: \"AES-GCM\", iv },\n        key,\n        encoded,\n    )\n    let buffer = new Uint8Array(cipherText)\n    let dec = new TextDecoder().decode(buffer)\n    return bufferToHex(buffer)\n}\n\nexport async function publicKeyEncrypt(publicKey, data) {\n    const encoder = new TextEncoder()\n    const encoded = encoder.encode(data)\n    let cipherText = await window.crypto.subtle.encrypt(\n        { name: \"RSA-OAEP\" },\n        publicKey,\n        encoded\n    )\n    console.log(cipherText)\n    let buffer = new Uint8Array(cipherText)\n    return bufferToHex(buffer)\n}\n\nexport async function privateKeyDecrypt(privateKey, cipherString) {\n    const cipherText = hexToBuffer(cipherString)\n    const buffer = await window.crypto.subtle.decrypt(\n        { name: \"RSA-OAEP\" },\n        privateKey,\n        cipherText\n    )\n    let dec = new TextDecoder().decode(new Uint8Array(buffer))\n    return dec\n}\n\nexport async function symmetricKeyDecrypt(key, iv, cipherString) {\n    const cipherText = hexToBuffer(cipherString)\n    const buffer = await window.crypto.subtle.decrypt(\n        { name: \"AES-GCM\", iv },\n        key,\n        cipherText\n    )\n    let dec = new TextDecoder().decode(new Uint8Array(buffer))\n    return dec\n}\n\n// Credit: https://developer.cybersource.com/library/documentation/dev_guides/Secure_Acceptance_Flex/Key/html/wwhelp/wwhimpl/common/html/wwhelp.htm#href=keys.html&single=true\nexport async function importPublicKey(keyJSON) {\n    return await window.crypto.subtle.importKey(\n        \"jwk\",\n        keyJSON,\n        {\n            name: \"RSA-OAEP\",\n            hash: { name: \"SHA-256\" }\n        },\n        false,\n        [\"encrypt\"]\n    )\n}\n\nexport async function importPrivateKey(keyJSON) {\n    return await window.crypto.subtle.importKey(\n        \"jwk\",\n        keyJSON,\n        {\n            name: \"RSA-OAEP\",\n            hash: { name: \"SHA-256\" }\n        },\n        false,\n        [\"decrypt\"]\n    )\n}\n","import React, { useState, useEffect, useCallback, createRef } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport * as contract from \"./utils/contract\";\nimport AccountInfo from \"./components/AccountInfo\";\nimport * as cryptography from \"./utils/cryptography\";\n\nconst App = () => {\n    const account = window.walletConnection.account();\n\n    // Get key pair\n    const [keyPair, updateKeyPair] = useState({})\n    const [showPrivateKeyField, updatePrivateKeyFieldVis] = useState(true)\n    const [privateKeyField, updatePrivateKeyField] = useState(\"Fetching private key...\")\n    const privateKeyRead = createRef()\n    const privateKeyInput = createRef()\n\n    async function uploadOrGetPublicKey(accountId) {\n        let publicKey = await contract.getAccountPublicKey(accountId)\n        if (publicKey === null) {\n            let keyPair = await cryptography.createKeyPair()\n            let publicKeyJSON = JSON.stringify(keyPair.publicKey)\n            let privateKeyJSON = JSON.stringify(keyPair.privateKey)\n            await contract.addAccountInfo(publicKeyJSON)\n            localStorage.setItem(\"privateKey\", privateKeyJSON);\n            updatePrivateKeyFieldVis(true)\n            updatePrivateKeyField(privateKeyJSON)\n            publicKey = await contract.getAccountPublicKey(accountId)\n        }\n        let publicKeyJSON = JSON.parse(publicKey)\n        publicKey = await cryptography.importPublicKey(publicKeyJSON)\n        return publicKey\n    }\n    const fetchKeyPair = useCallback(async () => {\n        let publicKey = await uploadOrGetPublicKey(account.accountId)\n        let privateKey = null\n        try {\n            const privateKeyString = localStorage.getItem(\"privateKey\")\n            if (privateKeyString === null) { throw \"error\" }\n            updatePrivateKeyField(privateKeyString)\n            privateKey = await cryptography.importPrivateKey(JSON.parse(privateKeyString))\n        } catch {\n            updatePrivateKeyFieldVis(false)\n            updatePrivateKeyField(\"\")\n            updateKeyPair({\n                publicKey,\n                privateKey: null\n            })\n            console.log(\"keypair\", keyPair)\n            return\n        }\n        updateKeyPair({\n            publicKey,\n            privateKey\n        })\n        console.log(\"keypair\", keyPair)\n    }, [account.accountId])\n    useEffect(() => {\n        fetchKeyPair();\n    }, [fetchKeyPair]);\n\n    // Data entries\n    const [dataEntries, updateDataEntries] = useState([]);\n    const fetchDataEntries = useCallback(async () => {\n        if (account.accountId) {\n            let entries = []\n            let ids = (await contract.getAccountDataIds(account.accountId)) || [];\n            console.log(account.accountId, ids)\n            for (const id of ids) {\n                let title = await contract.getDataTitle(id)\n                entries.push({ id, title })\n            }\n            updateDataEntries(entries)\n            console.log(entries)\n        }\n    }, [account.accountId])\n    useEffect(() => {\n        fetchDataEntries();\n    }, [fetchDataEntries]);\n\n    const [contributors, updateContributors] = useState([])\n    const fetchContributors = useCallback(async () => {\n        if (account.accountId) {\n            const contributors = await contract.getAccountContributors(account.accountId)\n            console.log(contributors)\n            updateContributors(contributors)\n        }\n    }, [account.accountId])\n    useEffect(() => {\n        fetchContributors()\n    }, [fetchContributors])\n\n    // Upload data\n    const accountInput = createRef()\n    const titleInput = createRef()\n    const dataInput = createRef()\n    const uploadButton = createRef()\n    let [showAccountInput, updateAccountInputVisibility] = useState(true)\n\n    async function uploadEncryptedData() {\n        let toAccount = showAccountInput ? account.accountId : accountInput.current.value\n        const receiverPublicKey = showAccountInput ? keyPair.publicKey : await cryptography.importPublicKey(JSON.parse(await contract.getAccountPublicKey(toAccount)))\n        console.log(\"recpubkey\", receiverPublicKey)\n        let title = titleInput.current.value\n        let data = dataInput.current.value\n        const iv = window.crypto.getRandomValues(new Uint8Array(12)) // Initial vector\n        let symmetricKey = await cryptography.createSymmetricKey()\n        let keyString = await cryptography.exportSymmetricKey(symmetricKey)\n        console.log(symmetricKey, keyString)\n        console.log(\"data\", data)\n        let encryptedData = await cryptography.symmetricKeyEncrypt(symmetricKey, iv, data)\n        let encryptedSymmetricKey = await cryptography.publicKeyEncrypt(receiverPublicKey, JSON.stringify({ key: keyString, iv: cryptography.bufferToHex(iv) }))\n        console.log(\"encsymkey\", encryptedSymmetricKey)\n        console.log(\"encdata\", encryptedData)\n        contract.uploadData(toAccount, encryptedSymmetricKey, encryptedData, title)\n    }\n\n    function copyPrivateKey() {\n        privateKeyRead.current.value = privateKeyField\n        privateKeyRead.current.select()\n        navigator.clipboard.writeText(privateKeyField)\n    }\n\n    function setPrivateKey() {\n        try {\n            let privateKey = JSON.parse(privateKeyInput.current.value)\n            updatePrivateKeyFieldVis(true)\n            updatePrivateKeyField(privateKeyInput.current.value)\n            updateKeyPair({\n                publicKey: keyPair.publicKey,\n                privateKey,\n            })\n            localStorage.setItem(\"privateKey\", privateKeyInput.current.value)\n        } catch (error) {\n            console.log(error)\n            privateKeyInput.current.value = \"Invalid private key!\"\n        }\n    }\n\n    const contributorInput = createRef()\n    async function addContributor() {\n        const newContributor = contributorInput.current.value\n        await contract.addContributor(newContributor)\n\n    }\n\n    return (\n        <>\n            <AccountInfo account={account} />\n            {account.accountId && (\n                <>\n                    <div className=\"private-key-section\">\n                        {privateKeyField !== \"\" ? (\n                            <>\n                                <div>\n                                    <b>View Your Private Key:&nbsp;</b>\n                                    <input type=\"checkbox\" onClick={() => updatePrivateKeyFieldVis(!showPrivateKeyField)} value={showPrivateKeyField} />\n                                </div>\n                                {showPrivateKeyField && (\n                                    <>\n                                        Private key:\n                                        <input ref={privateKeyRead} value={privateKeyField} />\n                                        <button onClick={() => copyPrivateKey()}>Copy</button>\n                                        <button onClick={() => updatePrivateKeyField(\"\")}>Re-enter</button>\n                                        <div><i>Locally store your private key on your device and do not share it with anyone.</i></div>\n                                    </>\n                                )}\n                            </>\n                        ) : (\n                            <div>\n                                <b>Paste Your Private Key: </b>\n                                <input ref={privateKeyInput} />\n                                <button onClick={() => setPrivateKey()}>Submit</button>\n                                <div><i>Make sure your private key starts with a \"{\"{\"}\" and ends with a \"{\"}\"}\" (JSON format).</i></div>\n                            </div>\n                        )}\n                    </div>\n                    <div><b>Your Data:</b></div>\n                    <ul className=\"data-entries\">\n                        {dataEntries.map(({ id, title }) => (\n                            <li key={id}>\n                                {title}&nbsp;\n                                <Link to={`/data/${id}`}>(view)</Link>\n                            </li>\n                        ))}\n                    </ul>\n                    <div className=\"section-title\"><b>Upload Data:</b></div>\n                    <div>\n                        <div>\n                            To your account:&nbsp;\n                            <input type=\"checkbox\" checked={showAccountInput} onClick={() => updateAccountInputVisibility(!showAccountInput)} />\n                        </div>\n                        {!showAccountInput && (\n                            <div>\n                                Account:&nbsp;\n                                <input ref={accountInput} />\n                            </div>\n                        )}\n                        <div>\n                            Title:&nbsp;\n                            <input ref={titleInput} />\n                        </div>\n                        <div>\n                            Data:&nbsp;\n                            <input ref={dataInput} />\n                        </div>\n                        <button ref={uploadButton} onClick={async () => await uploadEncryptedData()}>Upload</button>\n                    </div>\n\n                    <div className=\"section-title\"><b>Contributors:</b> {contributors.length === 0 && \"None\"}</div>\n                    <ul>\n                        {contributors.map((c) => (\n                            <li key={c}>\n                                {c}\n                            </li>\n                        ))}\n                    </ul>\n\n                    <div className=\"section-title\">\n                        <b>Add Contributor:</b>\n                        <input ref = {contributorInput} />\n                        <button onClick={async () => await addContributor()}>Add</button>\n                        </div>\n                </>\n            )}\n            <style jsx>{`\n                .section-title {\n                    margin-top: 50px;\n                }\n\n                .private-key-section {\n                    margin-bottom: 30px;\n                }\n\n                .private-key-field {\n                    font-size: 0.7rem;\n                    margin: 0 50px;\n                    font-family: monospace;\n                }\n            `}</style>\n        </>\n    );\n}\n\nexport default App;","import { useParams, Link } from \"react-router-dom\"\nimport React, { useState, useEffect, useCallback } from \"react\";\nimport AccountInfo from \"./AccountInfo\";\nimport * as contract from \"../utils/contract\";\nimport * as cryptography from \"../utils/cryptography\"\n\nexport default function DataEntry() {\n    const account = window.walletConnection.account();\n    let { id } = useParams()\n    const [dataEntry, updateDataEntry] = useState({})\n    const fetchDataEntry = useCallback(async () => {\n        if (account.accountId) {\n            let entry = {}\n            let ids = await contract.getAccountDataIds(account.accountId)\n            if (!ids.includes(id)) {\n                entry.error = true\n                entry.errorMessage = `No data entry found for id of \"${id}\"`\n                updateDataEntry(entry)\n                return;\n            }\n            try {\n                const encryptedSymmetricKey = await contract.getEncryptedSymmetricKey(id)\n                const encryptedData = await contract.getEncryptedData(id)\n                const uploader = await contract.getDataUploader(id)\n                const title = await contract.getDataTitle(id)\n                const privateKey = await cryptography.importPrivateKey(JSON.parse(localStorage.getItem(\"privateKey\")))\n                console.log(privateKey)\n                const decryptedSym = await cryptography.privateKeyDecrypt(privateKey, encryptedSymmetricKey) \n                const symKey = await cryptography.importSymmetricKey(JSON.parse(decryptedSym).key)\n                const decIV = cryptography.hexToBuffer(JSON.parse(decryptedSym).iv)\n                const decryptedData = await cryptography.symmetricKeyDecrypt(symKey, decIV, encryptedData)\n                console.log(\"decdata\", decryptedData)\n                updateDataEntry({\n                    title,\n                    uploader,\n                    data: decryptedData\n                })\n            } catch (e) {\n                console.log(e)\n                updateDataEntry({\n                    error: true,\n                    errorMessage: \"Decryption error. Make sure you entered your private key correctly or check if you have access to this data.\"\n                })\n            }\n        }\n    }, [account.accountId])\n    useEffect(() => {\n        fetchDataEntry()\n    }, [fetchDataEntry])\n\n    return (\n        <>\n            <AccountInfo account = {account} />\n            {dataEntry.error ? (\n                <div><i>{dataEntry.errorMessage}</i></div>\n            ) : (\n                <>\n                    <div><b>Title:</b> {dataEntry.title}</div>\n                    <div><b>Data:</b> {dataEntry.data}</div>\n                    <div><b>Uploader:</b> {dataEntry.uploader}</div>\n                </>\n            )}\n            <div className = \"back-link\">\n                <Link to = \"/\">Back to home page</Link>\n            </div>\n            <style jsx = \"true\">{`\n                .back-link {\n                    margin-top: 20px;\n                }\n            `}</style>\n        </>\n    )\n}","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { BrowserRouter, Routes, Route } from \"react-router-dom\";\nimport App from \"./App\";\nimport DataEntry from \"./components/DataEntry\"\nimport { initializeContract } from \"./utils/near\";\n\nwindow.nearInitPromise = initializeContract()\n    .then(() => {\n        ReactDOM.render(\n            <React.StrictMode>\n                <BrowserRouter>\n                    <Routes>\n                        <Route path = \"/\" element = {<App />} />\n                        <Route path = \"/data\" element = {<DataEntry />}>\n                            <Route path = \":id\" element = {<DataEntry />} />\n                        </Route>\n                    </Routes>\n                </BrowserRouter>\n            </React.StrictMode>,\n            document.getElementById(\"root\")\n        );\n    })\n    .catch(console.error);\n"],"sourceRoot":""}